#!/usr/bin/env python

from cStringIO import StringIO
import mimetypes
from operator import itemgetter
from optparse import OptionParser
import os.path
import sys

import bottle
import cairo

from tilecloud import Tile, TileCoord, TileStore
from tilecloud.filter.contenttype import ContentTypeAdder


option_parser = OptionParser()
option_parser.add_option('--debug', action='store_true', default=False)
option_parser.add_option('--host', default='127.0.0.1', metavar='HOST')
option_parser.add_option('--port', default=8080, metavar='PORT', type=int)
option_parser.add_option('--quiet', action='store_true', default=False)
options, args = option_parser.parse_args(sys.argv[1:])

if options.debug:
    bottle.DEBUG = True

tile_stores = [(os.path.basename(arg), TileStore.load(arg)) for arg in args]
content_type_adder = ContentTypeAdder()


def emptytile(tilecoord, inset=4):
    image_surface = cairo.ImageSurface(cairo.FORMAT_RGB24, 256, 256)
    context = cairo.Context(image_surface)
    context.set_source_rgb(1, 1, 1)
    context.paint()
    context.rectangle(0.5 + inset, 0.5 + inset, 256 - 2 * inset, 256 - 2 * inset)
    context.set_source_rgb(0, 0, 0)
    context.set_line_width(1)
    context.stroke()
    text = str(tilecoord)
    extents = context.text_extents(text)
    context.move_to(128.0 - extents[2] / 2.0, 128 - extents[3] / 2.0)
    context.show_text(text)
    context.fill()
    string_io = StringIO()
    image_surface.write_to_png(string_io)
    return Tile(tilecoord, content_type='image/png', data=string_io.getvalue())


@bottle.route('/data/image/<index:int>/tiles/<z:int>/<x:int>/<y:int><ext:re:.*>')
def tile(index, z, x, y, ext):
    # FIXME check ext
    if len(tile_stores) < index:
        bottle.abort(404)
    tilecoord = TileCoord(z, x, y)
    tile = tile_stores[index][1].get_one(Tile(tilecoord))
    if tile is None:
        tile = emptytile(tilecoord)
    tile = content_type_adder(tile)
    if hasattr(tile, 'content_type'):
        bottle.response.content_type = tile.content_type
    if hasattr(tile, 'content_encoding'):
        bottle.response.set_header('Content-Encoding', tile.content_encoding)
    bottle.response.content_length = len(tile.data)
    return tile.data


@bottle.route('/data/image/<index:int>/layersettings.json')
def openwebglobe_layersettings(index):
    if len(tile_stores) < index:
        bottle.abort(404)
    name, tile_store = tile_stores[index]
    maxlod = 20 # FIXME maybe get from TileStore
    format = 'jpg' # FIXME
    if hasattr(tile_store, 'content_type') and tile_store.content_type is not None:
        ext = mimetypes.guess_extension(tile_store.content_type)
        if ext is not None and ext.startswith('.'):
            format = ext[1:]
    return dict(name=name, maxlod=maxlod, extent=[0, 0, 1 << maxlod, 1 << maxlod], type='image', format=format)


@bottle.route('/openlayers/build/<dir:re:img|theme>/<filename:path>')
def openlayers(dir, filename):
    return bottle.static_file(filename, root='./submodules/openlayers/%s/' % (dir,))


@bottle.route('/openlayers/<filename:path>')
def openlayers(filename):
    return bottle.static_file(filename, root='./submodules/openlayers')


@bottle.route('/openlayers')
@bottle.view('openlayers')
def index():
    return dict(debug=bottle.request.GET.get('debug'), names=map(itemgetter(0), tile_stores))


@bottle.route('/openwebglobe/<dir:re:art|compiled|external|source>/<filename:path>')
def openlayers(dir, filename):
    return bottle.static_file(filename, root='./submodules/WebViewer/%s/' % (dir,))


@bottle.route('/openwebglobe')
@bottle.view('openwebglobe')
def index():
    return dict(debug=bottle.request.GET.get('debug'), names=map(itemgetter(0), tile_stores))


@bottle.route('/')
@bottle.view('index')
def index():
    return dict(debug=bottle.request.GET.get('debug'))


if __name__ == '__main__':
    bottle.DEBUG = True
    bottle.run(host=options.host, port=options.port, reloader=options.debug, quiet=options.quiet)
