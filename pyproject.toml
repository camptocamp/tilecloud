[tool.ruff]
target-version = "py310"
line-length = 110

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.poetry]
version = "0.0.0"

[tool.poetry.dependencies]
python = ">=3.10,<3.14"
azure-storage-blob = { version = "12.25.1", optional = true }
azure-identity = { version = "1.23.0", optional = true }
boto3 = { version = "1.39.1", optional = true }
bottle = "0.13.4"
prometheus_client = { version = "0.22.1", optional = true }
Pillow = "11.3.0"
pyproj = "3.7.1"
pyramid = { version = "2.0.2", optional = true }
requests = "2.32.4"
redis = { version = "6.2.0", optional = true }
cryptography = "45.0.4"

[tool.poetry.extras]
azure = ["azure-storage-blob", "azure-identity"]
aws = ["boto3"]
wsgi = ["pyramid"]
redis = ["redis"]
prometheus = ["prometheus_client"]
all = ["azure-storage-blob", "azure-identity", "boto3", "pyramid", "redis", "prometheus_client"]

[tool.poetry.group.dev.dependencies]
prospector = { version = "1.17.2", extras = ["with_bandit", "with_mypy", "with_pyroma", "with_ruff"] }
prospector-profile-duplicated = "1.10.5"
prospector-profile-utils = "1.25.0"
pytest = "8.4.1"
pytest-cov = "6.2.1"
types-boto = "2.49.18.20241019"
types-redis = "4.6.0.20241004"
types-requests = "2.32.4.20250611"
pycairo = "1.28.0"
Shapely = "2.1.1"
urllib3 = "2.5.0" # Lock the used version to avoid lock issue

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = "^(?P<base>\\d+(\\.\\d+)*)"
format-jinja = """
{%- if env.get("VERSION_TYPE") == "default_branch" -%}
{{serialize_pep440(bump_version(base, 1), dev=distance)}}
{%- elif env.get("VERSION_TYPE") == "stabilization_branch" -%}
{{serialize_pep440(bump_version(base, 2), dev=distance)}}
{%- elif distance == 0 -%}
{{serialize_pep440(base)}}
{%- else -%}
{{serialize_pep440(bump_version(base), dev=distance)}}
{%- endif -%}
"""

[tool.poetry-plugin-tweak-dependencies-version]
default = "present"

[project]
classifiers = [
    'Development Status :: 6 - Mature',
    'Environment :: Console',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: BSD License',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Topic :: Scientific/Engineering :: GIS',
    'Typing :: Typed',
]
dynamic = ["dependencies", "version"]
name = "tilecloud"
description = "Tools for managing tiles"
readme = "README.md"
keywords = ["gis", "tilecloud"]
license = "BSD-2-Clause"
authors = [{name = "Camptocamp",email = "info@camptocamp.com"}]
packages = [{ include = "tilecloud" }]
include = ["tilecloud/py.typed"]
requires-python = ">=3.10"
dependencies = ["bottle", "Pillow", "pyproj", "requests", "cryptography"]

[project.urls]
repository = "https://github.com/camptocamp/tilecloud"
"Bug Tracker" = "https://github.com/camptocamp/tilecloud/issues"

[project.scripts]
c2cciutils = "c2cciutils.scripts.main:main"
tc-copy = "tilecloud.scripts.tc_copy:main"
tc-delete = "tilecloud.scripts.tc_delete:main"
tc-info = "tilecloud.scripts.tc_info:main"
tc-mask = "tilecloud.scripts.tc_mask:main"
tc-mbtiles = "tilecloud.scripts.tc_mbtiles_create:main"
tc-mbtiles-info = "tilecloud.scripts.tc_mbtiles_info:main"
tc-redifined-bounds = "tilecloud.scripts.tc_refine_bounds:main"
tc-viewer = "tilecloud.scripts.tc_viewer:main"

[project.optional-dependencies]
azure = ["azure-storage-blob", "azure-identity"]
all = ["azure-storage-blob", "azure-identity", "boto3", "prometheus_client", "pyramid", "redis"]
aws = ["boto3"]
prometheus = ["prometheus_client"]
wsgi = ["pyramid"]
redis = ["redis"]

[build-system]
requires = [
    "poetry-core>=1.3.0",
    "poetry-dynamic-versioning",
    "poetry-plugin-tweak-dependencies-version>=1.1.0",
]
build-backend = "poetry.core.masonry.api"
