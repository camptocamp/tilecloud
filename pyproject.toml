[tool.black]
line-length = 110
target-version = ['py38']

[tool.mypy]
python_version = 3.8
warn_redundant_casts = true
warn_unused_ignores = true
ignore_missing_imports = true
strict_optional = true
strict = true

[tool.isort]
known_first_party = "tilecloud"
profile = "black"
line_length = 110

[tool.poetry]
name = "tilecloud"
version = "0.0.0"
description = "Tools for managing tiles"
readme = "README.md"
authors = ["Camptocamp <info@camptocamp.com>"]
repository = "https://github.com/camptocamp/tilecloud"
license = "BSD-2-Clause"
keywords = ["gis", "tilecloud"]
packages = [{ include = "tilecloud" }]
classifiers = [
    "Development Status :: 6 - Mature",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: GIS",
    "Typing :: Typed",
]
include = ["tilecloud_chain/py.typed"]

[tool.poetry.scripts]
c2cciutils = "c2cciutils.scripts.main:main"
tc-copy = "tilecloud.scripts.tc_copy:main"
tc-delete = "tilecloud.scripts.tc_delete:main"
tc-info = "tilecloud.scripts.tc_info:main"
tc-mask = "tilecloud.scripts.tc_mask:main"
tc-mbtiles = "tilecloud.scripts.tc_mbtiles_create:main"
tc-mbtiles-info = "tilecloud.scripts.tc_mbtiles_info:main"
tc-redifined-bounds = "tilecloud.scripts.tc_refine_bounds:main"
tc-viewer = "tilecloud.scripts.tc_viewer:main"

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
azure-storage-blob = { version = "12.16.0", optional = true }
azure-identity = { version = "1.13.0", optional = true }
boto3 = { version = "1.26.145", optional = true }
bottle = "0.12.25"
c2cwsgiutils = { version = "5.2.2", extras = ["broadcast"], optional = true }
Pillow = "9.5.0"
pyproj = "3.5.0"
pyramid = { version = "2.0.1", optional = true }
requests = "2.31.0"
redis = { version = "4.5.5", optional = true }

[tool.poetry.extras]
azure = ["azure-storage-blob", "azure-identity"]
aws = ["boto3"]
wsgi = ["pyramid"]
redis = ["redis", "c2cwsgiutils"]
all = ["azure-storage-blob", "azure-identity", "boto3", "pyramid", "redis", "c2cwsgiutils"]

[tool.poetry.dev-dependencies]
prospector = { version = "1.10.2", extras = ["with_bandit", "with_mypy", "with_pyroma"] }
pytest = "7.3.1"
pytest-cov = "4.1.0"
types-boto = "2.49.18.8"
types-redis = "4.5.5.2"
types-requests = "2.31.0.1"
pycairo = "1.23.0"
Shapely = "2.0.1"

[build-system]
requires = [
    "poetry-core>=1.3.0",
    "poetry-dynamic-versioning",
    "poetry-plugin-tweak-dependencies-version>=1.1.0"
]
build-backend = "poetry.core.masonry.api"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = "^(?P<base>\\d+(\\.\\d+)*)"
format-jinja = """
{%- if env.get("VERSION_TYPE") == "version_branch" -%}
{{serialize_pep440(bump_version(base, 1 if env.get("IS_MASTER") == "TRUE" else 2), dev=distance)}}
{%- elif distance == 0 -%}
{{serialize_pep440(base)}}
{%- else -%}
{{serialize_pep440(bump_version(base), dev=distance)}}
{%- endif -%}
"""

[tool.poetry-plugin-tweak-dependencies-version]
default = "present"
